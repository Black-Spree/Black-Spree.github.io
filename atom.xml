<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://black-spree.github.io</id>
    <title>BlackSpree</title>
    <updated>2020-04-09T09:01:08.600Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://black-spree.github.io"/>
    <link rel="self" href="https://black-spree.github.io/atom.xml"/>
    <subtitle>愈挫愈勇</subtitle>
    <logo>https://black-spree.github.io/images/avatar.png</logo>
    <icon>https://black-spree.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, BlackSpree</rights>
    <entry>
        <title type="html"><![CDATA[显示接口实现]]></title>
        <id>https://black-spree.github.io/post/xian-shi-jie-kou-shi-xian/</id>
        <link href="https://black-spree.github.io/post/xian-shi-jie-kou-shi-xian/">
        </link>
        <updated>2020-04-03T06:00:22.000Z</updated>
        <summary type="html"><![CDATA[<p>C#里的接口的实现方式有两种。分别是显示实现与隐式实现，平常常用隐式，在此记录一下显示实现。<br>
<font color=red>本文不确保正确</font></p>
]]></summary>
        <content type="html"><![CDATA[<p>C#里的接口的实现方式有两种。分别是显示实现与隐式实现，平常常用隐式，在此记录一下显示实现。<br>
<font color=red>本文不确保正确</font></p>
<!-- more -->
<h1 id="环境">环境</h1>
<blockquote>
<p>首先我们先定义一个接口 下文的代码默认包含此接口的定义</p>
<pre><code>interface ITestInterface
{
void Test1()=&gt;Conwole.WriteLine(&quot;默认显示实现&quot;);
void Test2();
}
</code></pre>
</blockquote>
<h1 id="隐式接口实现">隐式接口实现</h1>
<blockquote>
<p>首先我们先看看接口的隐式实现</p>
<pre><code>class Test:ITestInterface
{
  public void Test2() =&gt; Conwole.WriteLine(&quot;隐式实现&quot;);
}
</code></pre>
<p>调用时</p>
<pre><code>Test t = new Test();
t.Test2();
</code></pre>
<p>输出结果为    隐式实现<br>
#显示接口实现<br>
接下来是接口的显示实现</p>
<h2 id="默认实现">默认实现</h2>
<blockquote>
<p>显示实现允许接口对方法进行默认实现</p>
<pre><code> class Test:ITestInterface
{
}
//直接调用
ITestInterface test = new Test();
test.Test();
</code></pre>
<p>输出结果为 显示实现</p>
</blockquote>
<h2 id="重写实现">重写实现</h2>
<blockquote>
<p>显示实现允许接口对方法进行默认实现</p>
<pre><code> class Test:ITestInterface
{
 public  ITestInterface.Test()=&gt;Console.WriteLine(&quot;重写显示实现&quot;);
}
//直接调用
ITestInterface test = new Test();
test.Test();
</code></pre>
<p>输出结果为 重写显示实现</p>
</blockquote>
</blockquote>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[如何免费获取丰富的模型库]]></title>
        <id>https://black-spree.github.io/post/feng-fu-de-mo-xing-ku/</id>
        <link href="https://black-spree.github.io/post/feng-fu-de-mo-xing-ku/">
        </link>
        <updated>2020-03-29T16:16:25.000Z</updated>
        <content type="html"><![CDATA[<blockquote>
<h1 id="font-color-red注意font"><font color = "red">注意！</font></h1>
<h2 id="当你使用此方法获取模型你要承担应有的风险-如">当你使用此方法获取模型你要承担应有的风险 如</h2>
<blockquote>
<p>不能将模型用于商用<br>
承担版权责任</p>
</blockquote>
<h2 id="参考文章">参考文章:</h2>
<p>1.<a href="https://imjad.cn/archives/lab/ripping-sketchfab-models/">破解Sketchfab加密并提取模型数据</a><br>
2.<a href="https://www.agancg.cn/478/">【技巧学习】如何免费下载和提取Sketchfab的模型</a></p>
</blockquote>
<h1 id="准备">准备</h1>
<h2 id="1安装python环境">1.安装Python环境</h2>
<p>网上有许多此类教程 在此不多赘述<br>
传送门 <a href="https://www.runoob.com/python3/python3-install.html">菜鸟Python教程--Python3 环境搭建</a></p>
<h2 id="2安装python包">2.安装Python包</h2>
<p>因为下载脚本中用到了其他包 所以我们需要给Python环境安装这些包<br>
1.Requests包<br>
<a href="https://www.cnblogs.com/mmzs/p/8358765.html">博客园传送门</a><br>
2.Bs4包<br>
<a href="https://blog.csdn.net/Bibabu135766/article/details/81662981">CSDN传送门</a></p>
<h2 id="3下载所需脚本">3.下载所需脚本</h2>
<p>1.下载脚本<br>
2.解包脚本&amp;Blender<br>
<a href="http://cdn.agancg.cn/Sketchfab.7z">下载地址</a></p>
<h1 id="下载模型">下载模型</h1>
<p>运行Sketchfab_Download_Python_Script.exe<br>
当出现 InputUrl:时便可以输入网址 相关文件会被下载到程序根目录与模型同名的文件夹</p>
<h1 id="解包模型">解包模型</h1>
<p>模型数据在后缀名为osgjs的文件中<br>
开启下载的Blender 运行脚本 导入此文件便能解包模型网格数据</p>
<h1 id="备份">备份</h1>
<p>针对上述参考文章会有备份 备份代码如下:<br>
待定</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[Hello Gridea]]></title>
        <id>https://black-spree.github.io/post/hello-gridea/</id>
        <link href="https://black-spree.github.io/post/hello-gridea/">
        </link>
        <updated>2018-12-11T16:00:00.000Z</updated>
        <summary type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
]]></summary>
        <content type="html"><![CDATA[<p>👏  欢迎使用 <strong>Gridea</strong> ！<br>
✍️  <strong>Gridea</strong> 一个静态博客写作客户端。你可以用它来记录你的生活、心情、知识、笔记、创意... ...</p>
<!-- more -->
<p><a href="https://github.com/getgridea/gridea">Github</a><br>
<a href="https://gridea.dev/">Gridea 主页</a><br>
<a href="http://fehey.com/">示例网站</a></p>
<h2 id="特性">特性👇</h2>
<p>📝  你可以使用最酷的 <strong>Markdown</strong> 语法，进行快速创作</p>
<p>🌉  你可以给文章配上精美的封面图和在文章任意位置插入图片</p>
<p>🏷️  你可以对文章进行标签分组</p>
<p>📋  你可以自定义菜单，甚至可以创建外部链接菜单</p>
<p>💻  你可以在 <strong>Windows</strong>，<strong>MacOS</strong> 或 <strong>Linux</strong> 设备上使用此客户端</p>
<p>🌎  你可以使用 <strong>𝖦𝗂𝗍𝗁𝗎𝖻 𝖯𝖺𝗀𝖾𝗌</strong> 或 <strong>Coding Pages</strong> 向世界展示，未来将支持更多平台</p>
<p>💬  你可以进行简单的配置，接入 <a href="https://github.com/gitalk/gitalk">Gitalk</a> 或 <a href="https://github.com/SukkaW/DisqusJS">DisqusJS</a> 评论系统</p>
<p>🇬🇧  你可以使用<strong>中文简体</strong>或<strong>英语</strong></p>
<p>🌁  你可以任意使用应用内默认主题或任意第三方主题，强大的主题自定义能力</p>
<p>🖥  你可以自定义源文件夹，利用 OneDrive、百度网盘、iCloud、Dropbox 等进行多设备同步</p>
<p>🌱 当然 <strong>Gridea</strong> 还很年轻，有很多不足，但请相信，它会不停向前 🏃</p>
<p>未来，它一定会成为你离不开的伙伴</p>
<p>尽情发挥你的才华吧！</p>
<p>😘 Enjoy~</p>
]]></content>
    </entry>
</feed>